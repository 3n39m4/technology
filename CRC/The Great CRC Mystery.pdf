%PDF-1.5%‚„œ”
1 0 obj<</Pages 2 0 R/Outlines 6 0 R/Type/Catalog/Names 61 0 R/StructTreeRoot 7 0 R/Metadata 168 0 R/SpiderInfo 154 0 R>>endobj2 0 obj<</Count 12/Kids[83 0 R 82 0 R]/Type/Pages>>endobj3 0 obj<</ModDate(D:20051129181214-08'00')/CreationDate(D:20051129181213Z)/Title(The Great CRC Mystery)/Producer(Acrobat Web Capture 6.0)>>endobj5 0 obj nullendobj6 0 obj<</Count 2/Type/Outlines/First 166 0 R/Last 166 0 R>>endobj7 0 obj<</Type/StructTreeRoot/K 9 0 R/ClassMap 8 0 R/ParentTree 12 0 R/ParentTreeNextKey 12>>endobj8 0 obj<</SpdrArt<</O/WebCapture>>>>endobj9 0 obj<</K 10 0 R/P 7 0 R/S/Document>>endobj10 0 obj<</K[0<</Type/MCR/MCID 0/Pg 18 0 R>><</Type/MCR/MCID 0/Pg 20 0 R>><</Type/MCR/MCID 0/Pg 27 0 R>><</Type/MCR/MCID 0/Pg 32 0 R>><</Type/MCR/MCID 0/Pg 37 0 R>><</Type/MCR/MCID 0/Pg 43 0 R>><</Type/MCR/MCID 0/Pg 47 0 R>><</Type/MCR/MCID 0/Pg 52 0 R>><</Type/MCR/MCID 0/Pg 71 0 R>><</Type/MCR/MCID 0/Pg 81 0 R>><</Type/MCR/MCID 0/Pg 100 0 R>>]/C/SpdrArt/P 9 0 R/S/Article/Pg 11 0 R>>endobj11 0 obj<</ID 160 0 R/Annots 15 0 R/Contents 130 0 R/Type/Page/Parent 83 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 84 0 R/T1_1 85 0 R/T1_2 86 0 R>>/ProcSet[/PDF/Text]>>/StructParents 0>>endobj12 0 obj<</Nums[0 13 0 R 1 19 0 R 2 21 0 R 3 28 0 R 4 33 0 R 5 38 0 R 6 44 0 R 7 48 0 R 8 53 0 R 9 72 0 R 10 89 0 R 11 103 0 R]>>endobj13 0 obj[10 0 R]endobj14 0 obj<</Rect[351.700012 678.0 418.200012 693.0]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST1.HTM)/S/URI>>>>endobj15 0 obj[14 0 R 16 0 R 17 0 R]endobj16 0 obj<</Rect[50.0 659.200012 118.837997 674.200012]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM)/S/URI>>>>endobj17 0 obj<</Rect[333.511993 253.830765 340.511993 268.83075]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</D(ÜÀ[—ıÕœÉË˙¿qv@Note1)/S/GoTo>>/PA<</URI(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM#Note1)/S/URI>>>>endobj18 0 obj<</ID 160 0 R/Contents 132 0 R/Type/Page/Parent 83 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 84 0 R/T1_1 86 0 R>>/ProcSet[/PDF/Text]>>/StructParents 1>>endobj19 0 obj[10 0 R]endobj20 0 obj<</ID 160 0 R/Annots 23 0 R/Contents 136 0 R/Type/Page/Parent 83 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 84 0 R/T1_1 86 0 R>>/ProcSet[/PDF/Text]>>/StructParents 2>>endobj21 0 obj[10 0 R]endobj22 0 obj<</Rect[509.604004 646.599976 516.604004 661.599976]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</D(ÜÀ[—ıÕœÉË˙¿qv@Note2)/S/GoTo>>/PA<</URI(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM#Note2)/S/URI>>>>endobj23 0 obj[22 0 R 24 0 R 25 0 R 26 0 R]endobj24 0 obj<</Rect[328.458008 543.799988 335.458008 558.799988]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</D(ÜÀ[—ıÕœÉË˙¿qv@Note3)/S/GoTo>>/PA<</URI(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM#Note3)/S/URI>>>>endobj25 0 obj<</Rect[563.643982 455.600006 570.643982 470.600006]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</D(ÜÀ[—ıÕœÉË˙¿qv@Note4)/S/GoTo>>/PA<</URI(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM#Note4)/S/URI>>>>endobj26 0 obj<</Rect[550.400024 369.600006 557.400024 384.600006]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</D(ÜÀ[—ıÕœÉË˙¿qv@Note5)/S/GoTo>>/PA<</URI(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM#Note5)/S/URI>>>>endobj27 0 obj<</ID 160 0 R/Annots 30 0 R/Contents 138 0 R/Type/Page/Parent 83 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 84 0 R/T1_1 111 0 R>>/ProcSet[/PDF/Text]>>/StructParents 3>>endobj28 0 obj[10 0 R]endobj29 0 obj<</Rect[522.848022 629.799988 529.848022 644.799988]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</D(ÜÀ[—ıÕœÉË˙¿qv@Note6)/S/GoTo>>/PA<</URI(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM#Note6)/S/URI>>>>endobj30 0 obj[29 0 R 31 0 R]endobj31 0 obj<</Rect[14.662003 268.399994 21.662003 283.399994]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</D(ÜÀ[—ıÕœÉË˙¿qv@Note7)/S/GoTo>>/PA<</URI(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM#Note7)/S/URI>>>>endobj32 0 obj<</ID 160 0 R/Annots 35 0 R/Contents 140 0 R/Type/Page/Parent 83 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 84 0 R/T1_1 111 0 R>>/ProcSet[/PDF/Text]>>/StructParents 4>>endobj33 0 obj[10 0 R]endobj34 0 obj<</Rect[64.445999 543.599976 130.945999 558.599976]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST1.HTM)/S/URI>>>>endobj35 0 obj[34 0 R 36 0 R]endobj36 0 obj<</Rect[85.054001 45.600006 155.054001 60.600006]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST1.HTM)/S/URI>>>>endobj37 0 obj<</ID 160 0 R/Annots 40 0 R/Contents 142 0 R/Type/Page/Parent 82 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 84 0 R/T1_1 86 0 R>>/ProcSet[/PDF/Text]>>/StructParents 5>>endobj38 0 obj[10 0 R]endobj39 0 obj<</Rect[566.780029 606.815369 573.780029 621.815369]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</D(ÜÀ[—ıÕœÉË˙¿qv@Note8)/S/GoTo>>/PA<</URI(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM#Note8)/S/URI>>>>endobj40 0 obj[39 0 R 41 0 R 42 0 R]endobj41 0 obj<</Rect[119.634003 588.015381 126.634003 603.015381]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</D(ÜÀ[—ıÕœÉË˙¿qv@Note9)/S/GoTo>>/PA<</URI(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM#Note9)/S/URI>>>>endobj42 0 obj<</Rect[142.985992 535.615356 211.824005 550.615356]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM)/S/URI>>>>endobj43 0 obj<</ID 160 0 R/Annots 46 0 R/Contents 144 0 R/Type/Page/Parent 82 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 84 0 R/T1_1 86 0 R>>/ProcSet[/PDF/Text]>>/StructParents 6>>endobj44 0 obj[10 0 R]endobj45 0 obj<</Rect[532.59198 227.430771 546.59198 242.430771]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</D(ÜÀ[—ıÕœÉË˙¿qv@Note10)/S/GoTo>>/PA<</URI(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM#Note10)/S/URI>>>>endobj46 0 obj[45 0 R]endobj47 0 obj<</ID 160 0 R/Annots 50 0 R/Contents 146 0 R/Type/Page/Parent 82 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 84 0 R/T1_1 86 0 R/T1_2 85 0 R>>/ProcSet[/PDF/Text]>>/StructParents 7>>endobj48 0 obj[10 0 R]endobj49 0 obj<</Rect[462.200012 161.046158 531.037964 176.046158]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM)/S/URI>>>>endobj50 0 obj[49 0 R 51 0 R]endobj51 0 obj<</Rect[67.932007 39.246155 164.770004 54.246155]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#PascalBBB)/S/URI>>>>endobj52 0 obj<</ID 160 0 R/Annots 55 0 R/Contents 148 0 R/Type/Page/Parent 82 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 84 0 R/T1_1 86 0 R/T1_2 111 0 R>>/ProcSet[/PDF/Text]>>/StructParents 8>>endobj53 0 obj[10 0 R]endobj54 0 obj<</Rect[370.779999 749.599976 474.226013 764.599976]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#PascalFastBBB)/S/URI>>>>endobj55 0 obj[54 0 R 56 0 R 57 0 R 58 0 R 59 0 R 60 0 R 65 0 R 66 0 R 67 0 R 68 0 R 69 0 R 70 0 R]endobj56 0 obj<</Rect[88.147995 697.200012 153.863998 712.200012]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#PascalByte)/S/URI>>>>endobj57 0 obj<</Rect[10.0 678.400024 81.147995 693.400024]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#PascalTable)/S/URI>>>>endobj58 0 obj<</Rect[186.134003 659.599976 212.580002 674.599976]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#MCByte)/S/URI>>>>endobj59 0 obj<</Rect[239.796005 659.599976 271.674011 674.599976]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#MCTable)/S/URI>>>>endobj60 0 obj<</Rect[430.294006 640.799988 472.671997 655.799988]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</D(ÜÀ[—ıÕœÉË˙¿qv@Table1)/S/GoTo>>/PA<</URI(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM#Table1)/S/URI>>>>endobj61 0 obj<</Dests 62 0 R/IDS 164 0 R/URLS 165 0 R>>endobj62 0 obj<</Names[(ÜÀ[—ıÕœÉË˙¿qv@Note1)90 0 R(ÜÀ[—ıÕœÉË˙¿qv@Note10)99 0 R(ÜÀ[—ıÕœÉË˙¿qv@Note11)104 0 R(ÜÀ[—ıÕœÉË˙¿qv@Note2)91 0 R(ÜÀ[—ıÕœÉË˙¿qv@Note3)92 0 R(ÜÀ[—ıÕœÉË˙¿qv@Note4)93 0 R(ÜÀ[—ıÕœÉË˙¿qv@Note5)94 0 R(ÜÀ[—ıÕœÉË˙¿qv@Note6)95 0 R(ÜÀ[—ıÕœÉË˙¿qv@Note7)96 0 R(ÜÀ[—ıÕœÉË˙¿qv@Note8)97 0 R(ÜÀ[—ıÕœÉË˙¿qv@Note9)98 0 R(ÜÀ[—ıÕœÉË˙¿qv@Table1)64 0 R]>>endobj64 0 obj[52 0 R/XYZ 0 363.790955 null]endobj65 0 obj<</Rect[10.0 254.215378 106.837997 269.215393]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#PascalBBB)/S/URI>>>>endobj66 0 obj<</Rect[264.338013 254.215378 367.783997 269.215393]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#PascalFastBBB)/S/URI>>>>endobj67 0 obj<</Rect[511.283997 254.215378 577.0 269.215393]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#PascalByte)/S/URI>>>>endobj68 0 obj<</Rect[150.0 235.41539 221.147995 250.41539]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#PascalTable)/S/URI>>>>endobj69 0 obj<</Rect[364.64801 235.41539 476.634003 250.41539]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#MCByte)/S/URI>>>>endobj70 0 obj<</Rect[45.0 216.615387 162.417999 231.615387]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#MCTable)/S/URI>>>>endobj71 0 obj<</ID 160 0 R/Annots 74 0 R/Contents 150 0 R/Type/Page/Parent 82 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 84 0 R/T1_1 86 0 R>>/ProcSet[/PDF/Text]>>/StructParents 9>>endobj72 0 obj[10 0 R]endobj73 0 obj<</Rect[566.429993 648.430786 580.429993 663.430786]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</D(ÜÀ[—ıÕœÉË˙¿qv@Note11)/S/GoTo>>/PA<</URI(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM#Note11)/S/URI>>>>endobj74 0 obj[73 0 R 75 0 R 76 0 R 77 0 R 78 0 R 79 0 R 80 0 R]endobj75 0 obj<</Rect[35.270004 610.630737 100.985992 625.630737]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#PascalByte)/S/URI>>>>endobj76 0 obj<</Rect[550.455994 591.83075 586.226013 606.83075]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#PascalTable)/S/URI>>>>endobj77 0 obj<</Rect[10.0 573.030762 41.878006 588.030762]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#PascalTable)/S/URI>>>>endobj78 0 obj<</Rect[226.160004 468.030762 343.578003 483.030762]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#MCTable)/S/URI>>>>endobj79 0 obj<</Rect[170.593994 449.230774 241.742004 464.230774]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#PascalTable)/S/URI>>>>endobj80 0 obj<</Rect[285.674011 430.430786 397.660004 445.430786]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/ARTS/CRCLIST2.HTM#MCByte)/S/URI>>>>endobj81 0 obj<</ID 160 0 R/Contents 152 0 R/Type/Page/Parent 82 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 84 0 R/T1_1 85 0 R/T1_2 86 0 R/T1_3 126 0 R>>/ProcSet[/PDF/Text]>>/StructParents 10>>endobj82 0 obj<</Count 7/Kids[37 0 R 43 0 R 47 0 R 52 0 R 71 0 R 81 0 R 100 0 R]/Type/Pages/Parent 2 0 R>>endobj83 0 obj<</Count 5/Kids[11 0 R 18 0 R 20 0 R 27 0 R 32 0 R]/Type/Pages/Parent 2 0 R>>endobj84 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/Times-Roman/Subtype/Type1>>endobj85 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/Times-Italic/Subtype/Type1>>endobj86 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/Helvetica-Bold/Subtype/Type1>>endobj89 0 obj[10 0 R]endobj90 0 obj[81 0 R/XYZ 0 559.476929 null]endobj91 0 obj[81 0 R/XYZ 0 513.852478 null]endobj92 0 obj[81 0 R/XYZ 0 480.252472 null]endobj93 0 obj[81 0 R/XYZ 0 463.452484 null]endobj94 0 obj[81 0 R/XYZ 0 446.652466 null]endobj95 0 obj[81 0 R/XYZ 0 362.652466 null]endobj96 0 obj[81 0 R/XYZ 0 329.05249 null]endobj97 0 obj[81 0 R/XYZ 0 261.852478 null]endobj98 0 obj[81 0 R/XYZ 0 161.052475 null]endobj99 0 obj[81 0 R/XYZ 0 93.852478 null]endobj100 0 obj<</ID 160 0 R/Annots 106 0 R/Contents 134 0 R/Type/Page/Parent 82 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 84 0 R/T1_1 85 0 R>>/ProcSet[/PDF/Text]>>/StructParents 11>>endobj103 0 obj[10 0 R]endobj104 0 obj[100 0 R/XYZ 0 753.975586 null]endobj105 0 obj<</Rect[10.0 664.200012 76.5 679.200012]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/AUTHOR.HTM)/S/URI>>>>endobj106 0 obj[105 0 R 107 0 R 108 0 R]endobj107 0 obj<</Rect[103.337997 664.200012 191.608002 679.200012]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/AUTHOR.HTM#Addr)/S/URI>>>>endobj108 0 obj<</Rect[242.945999 664.200012 291.554016 679.200012]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.ciphersbyritter.com/CRYPHTML.HTM)/S/URI>>>>endobj111 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/Courier/Subtype/Type1>>endobj126 0 obj<</Type/Font/BaseFont/ZapfDingbats/Subtype/Type1>>endobj129 0 obj 3772endobj130 0 obj<</Length 129 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(The Great CRC Mystery)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 50 734.97552 Tm
(PUBLISHED: Ritter, T. 1986. The Great CRC Mystery. )Tj
/T1_1 1 Tf
(Dr. Dobb's Journal of Software )Tj
0 -1.2 TD
(Tools)Tj
/T1_0 1 Tf
(. February. 11\(2\): 26-34, 76-83. )Tj
0 -2.55714 TD
(To read the complete article off-line, save these files: )Tj
ET
0 0 1 RG
0.7056 w 10 M 0 j 0 J []0 d 
351.70001 680.25873 m
418.20001 680.25873 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 351.70001 682.37555 Tm
(Listing One)Tj
0 0 0 rg
( \(CRCLIST1.HTM\), )Tj
ET
50 661.45874 m
118.83801 661.45874 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 50 663.57556 Tm
(Listing Two)Tj
0 0 0 rg
( \(CRCLIST2.HTM\). )Tj
/T1_2 1 Tf
24.76923 0 0 24.76923 167.67621 602.0968 Tm
(The Great CRC Mystery)Tj
19.38461 0 0 19.38461 253.75847 558.0918 Tm
(Terry Ritter)Tj
/T1_0 1 Tf
14 0 0 14 10 520.79095 Tm
(The Cyclic Redundancy Check \(or CRC\), is a way to detect errors in dat\a storage or transmission. With )Tj
0 -1.2 TD
(more and more data being transmitted over phone lines, the need for prot\ocols that protect data from )Tj
T*
(damage in transit as increased, but the theory behind CRC generation is \not well known. )Tj
ET
0.5 0.5 0.5 rg
10 454.41537 m
10 456.41537 l
602 456.41537 l
601 455.41537 l
11 455.41537 l
11 455.41537 l
h
f
0.875 0.875 0.875 rg
602 456.41537 m
602 454.41537 l
10 454.41537 l
11 455.41537 l
601 455.41537 l
601 455.41537 l
h
f
0 0 0 rg
BT
/T1_2 1 Tf
16.15384 0 0 16.15384 10 414.26111 Tm
(What Is a CRC?)Tj
/T1_0 1 Tf
14 0 0 14 10 378.00632 Tm
(The Cyclic Redundancy Check is a way to detecting small changes in block\s of data. Error detection is )Tj
T*
(especially important when computer programs are transmitted or stored, b\ecause an error of even one bit )Tj
T*
(\(perhaps out of hundreds of thousands\) is often sufficient to make a p\rogram faulty. Although a few )Tj
T*
(errors in a text file might be acceptable \(since the text can be reedit\ed when received or recovered\), an )Tj
T*
(error-free file is preferable. An error-correcting protocol triggered by\ CRC error-detection can provide )Tj
T*
(this accuracy at low cost. )Tj
0 -2.55714 TD
(The CRC algorithm operates on a block of data as a unit [)Tj
ET
333.51199 256.08951 m
340.51199 256.08951 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 333.51199 258.20633 Tm
(1)Tj
0 0 0 rg
(]. We can understand the CRC better if we )Tj
-23.108 -1.34286 Td
(see a block of data as a single \(large\) numerical value. The CRC algor\ithm divides this large value by a )Tj
0 -1.2 TD
(magic number \(the CRC polynomial or generator polynomial\), leaving the\ remainder, which is our CRC )Tj
T*
(result. )Tj
0 -2.55714 TD
(The CRC result can be sent or stored along with the original data. When \the data is received \(or )Tj
0 -1.2 TD
(recovered from storage\) the CRC algorithm can be reapplied, and the lat\est result compared to the )Tj
T*
(original result. If an error has occurred, we will probably get a differ\ent CRC result. Most uses of CRC )Tj
T*
(do not attempt to classify or locate the error \(or errors\), but simply\ arrange to repeat the data operation )Tj
T*
(until no errors are detected. )Tj
ET
0.5 0.5 0.5 rg
10 70.03076 m
10 72.03076 l
602 72.03076 l
601 71.03076 l
11 71.03076 l
11 71.03076 l
h
f
0.875 0.875 0.875 rg
602 72.03076 m
602 70.03076 l
10 70.03076 l
11 71.03076 l
601 71.03076 l
601 71.03076 l
h
f
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM \(1 of 12\)11/29/2005 10\:12:14 AM)Tj
ET
EMC 

endstreamendobj131 0 obj 4098endobj132 0 obj<</Length 131 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(The Great CRC Mystery)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_1 1 Tf
16.15384 0 0 16.15384 10 751.8457 Tm
(Using the CRC)Tj
/T1_0 1 Tf
14 0 0 14 10 715.59094 Tm
(The IBM 8-inch floppy disk specification used the CRC-CCITT polynomial f\or error-detection, and this )Tj
0 -1.2 TD
(CRC is now used in almost all disk controller devices. A disk controller\ computes a CRC as it writes a )Tj
T*
(disk sector, and then it appends that CRC to the data. When the data is \read back, a new CRC is )Tj
T*
(computed from the recovered data and compared to the original CRC. If th\e CRC values differ, an error )Tj
T*
(has occurred and the operation is repeated. The standard disk CRC \(CRC-\CCITT\) is hidden in the )Tj
T*
(controller, and nowadays receives little comment. )Tj
0 -2.55714 TD
(One version of the XMODEM \(or Christensen\) file transmission protocol \uses the CRC-CCITT )Tj
0 -1.2 TD
(polynomial to detect data transmission errors, typically caused by line \noise. When the receiving end )Tj
T*
(detects a data error, it sends a NAK \(Negative AcKnowledge\) character \to the sender, which requests )Tj
T*
(that the data block be retransmitted. The receiving end repeats this pro\cess until the CRC from the )Tj
T*
(transmitting end matches the local result, or until one or both ends giv\e up. When the result does match, )Tj
T*
(the receiving end sends an ACK \(ACKnowledge\) character, and the transm\itting end then sends the next )Tj
T*
(block. )Tj
ET
0.5 0.5 0.5 rg
10 462.21536 m
10 464.21536 l
602 464.21536 l
601 463.21536 l
11 463.21536 l
11 463.21536 l
h
f
0.875 0.875 0.875 rg
602 464.21536 m
602 462.21536 l
10 462.21536 l
11 463.21536 l
601 463.21536 l
601 463.21536 l
h
f
0 0 0 rg
BT
/T1_1 1 Tf
16.15384 0 0 16.15384 10 422.06113 Tm
(Error Control and Efficiency)Tj
/T1_0 1 Tf
14 0 0 14 10 385.8063 Tm
(Many different CRC polynomials are possible; these generator polynomials\ are designed and )Tj
T*
(constructed to have desirable error-detection properties. If the CRC pol\ynomials are "well constructed" )Tj
T*
(the major difference between them is in their length. Longer polynomials\ provide more assurance of )Tj
T*
(data accuracy and are fully usable over larger amounts of data; however,\ longer polynomials also )Tj
T*
(produce longer remainder values, which add additional error-checking ove\rhead to the data. )Tj
0 -2.55714 TD
(A "16-bit" polynomial has a 16-bit remainder. There are two well-known 1\6-bit polynomials: CRC-16 )Tj
0 -1.2 TD
(\(used in early BISYNC protocols\) and CRC-CCITT \(used in disk storage,\ SDLC, and XMODEM CRC\). )Tj
T*
(Of the two, CRC-CCITT may be a little stronger, and, by convention is of\ten used in ways which )Tj
T*
(strengthen its error-detection capabilities. This article illustrates CR\C-CCITT, which is the polynomial )Tj
T*
(x^16 + x^12 + x^5 + 1. )Tj
0 -2.55714 TD
(Polynomials are classified by their highest non-zero digit \(or place\) \which is termed the degree of the )Tj
0 -1.2 TD
(polynomial. Both CRC-16 and CRC-CCITT are of degree 16, which means that\ bits 16 through 0 are )Tj
0 -1.20001 TD
(significant in their description; a degree 16 polynomial thus has 17 bit\s. Normally we are most )Tj
0 -1.2 TD
(concerned with the remainder of the CRC operation, which has one bit les\s than the polynomial. Thus, )Tj
T*
(we may think of 16-bit CRC's, even though their generator polynomials ac\tually contain 17 bits \(bits 16 )Tj
T*
(through 0\). )Tj
0 -2.55714 TD
(In a proper CRC polynomial, both the most significant bit \(MSb\) and le\ast significant bit \(LSb\) are )Tj
0 -1.2 TD
(always a '1'. Because the highest bit of the polynomial is always a '1',\ we are able to treat this bit )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM \(2 of 12\)11/29/2005 10\:12:14 AM)Tj
ET
EMC 

endstreamendobj133 0 obj 1470endobj134 0 obj<</Length 133 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(The Great CRC Mystery)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 90 753.97556 Tm
(November. 116-129. )Tj
-4.60715 -1.2 Td
(11.  )Tj
(Some protocols other than XMODEM allow subsequent blocks to be sent befo\re a previous block )Tj
1.75 -1.2 Td
(is acknowledged, thus minimizing the latency problem. )Tj
ET
0.5 0.5 0.5 rg
10 687.60001 m
10 689.60001 l
602 689.60001 l
601 688.60001 l
11 688.60001 l
11 688.60001 l
h
f
0.875 0.875 0.875 rg
602 689.60001 m
602 687.60001 l
10 687.60001 l
11 688.60001 l
601 688.60001 l
601 688.60001 l
h
f
0 0 1 RG
0.6384 w 10 M 0 j 0 J []0 d 
10 666.66035 m
76.5 666.66035 l
S
0 0 1 rg
BT
/T1_1 1 Tf
14 0 0 14 10 668.57556 Tm
(Terry Ritter)Tj
0 0 0 rg
(, his )Tj
ET
103.338 666.66035 m
191.608 666.66035 l
S
0 0 1 rg
BT
/T1_1 1 Tf
14 0 0 14 103.338 668.57556 Tm
(current address)Tj
0 0 0 rg
(, and his )Tj
ET
242.946 666.66035 m
291.554 666.66035 l
S
0 0 1 rg
BT
/T1_1 1 Tf
14 0 0 14 242.946 668.57556 Tm
(top page)Tj
0 0 0 rg
(.)Tj
/T1_0 1 Tf
( )Tj
/T1_1 1 Tf
-16.63901 -2.7 Td
(Last updated:)Tj
/T1_0 1 Tf
( 1996-04-30 )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM \(12 of 12\)11/29/2005 1\0:12:14 AM)Tj
ET
EMC 

endstreamendobj135 0 obj 5326endobj136 0 obj<</Length 135 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(The Great CRC Mystery)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 753.97552 Tm
(differently from the other bits of the polynomial. Since the remainder f\rom a 16th degree polynomial has )Tj
0 -1.2 TD
(only 16 bits, a 16-bit register is sufficient for CRC operations on a 16\-bit polynomial, even though the )Tj
T*
(polynomial itself actually has 17 bits. )Tj
0 -2.55714 TD
(A well-constructed CRC polynomial over limited-size data blocks will det\ect any contiguous burst of )Tj
0 -1.2 TD
(errors shorter than the polynomial, any odd number of errors throughout \the block, any 2 bit errors )Tj
T*
(anywhere in the block, and most other cases of any possible errors anywh\ere in the data [)Tj
ET
0 0 1 RG
0.7056 w 10 M 0 j 0 J []0 d 
509.60403 648.8587 m
516.604 648.8587 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 509.60403 650.97552 Tm
(2)Tj
0 0 0 rg
(]. So every )Tj
-35.686 -1.34286 Td
(possible arrangement of 1, 2, or 3 bit errors will be detected. Neverthe\less, there remains a small )Tj
T*
(possibility that some errors will not be detected. This happens when the\ pattern of the errors results in a )Tj
T*
(new value which, when divided, produces exactly the same remainder as th\e correct block. With a )Tj
T*
(properly constructed 16-bit CRC, there is an average of one error patter\n which will not be detected for )Tj
T*
(every 65,535 which would be detected. That is, with CRC-CCITT, we should\ detect be able to detect )Tj
T*
(65535/65536ths or 99.998 percent of all possible errors [)Tj
ET
328.45798 546.05872 m
335.45798 546.05872 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 328.45798 548.17554 Tm
(3)Tj
0 0 0 rg
(]. )Tj
-22.74699 -2.7 Td
(There is no technique which we can use to absolutely guarantee detection\ of any error; but we can )Tj
T*
(minimize undetected errors at reasonable cost. Other error-detection tec\hniques are available, such as )Tj
T*
(checksum or voting, but these have poorer error-detection capabilities. \For example, the single-byte )Tj
T*
(checksum \(used in the original version of XMODEM\) appears to be about \99.29 percent accurate [)Tj
ET
563.64404 457.85873 m
570.64404 457.85873 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 563.64404 459.97556 Tm
(4)Tj
0 0 0 rg
(], )Tj
-39.54601 -1.34286 Td
(which seems pretty good. But for a single additional byte, the CRC techn\ique is about 460 times less )Tj
T*
(likely to let an error pass undetected. In practice, the difference is m\uch greater because the CRC will )Tj
T*
(detect all cases of just a few errors, and these cases are most common. \The cost is a 2-byte CRC value in )Tj
T*
(every block. For example, the XMODEM protocol sends data in 128-byte blo\cks; these blocks can be )Tj
T*
(CRC error-checked with an additional two bytes--an error-check overhead \of about 1.5 percent [)Tj
ET
550.39996 371.85873 m
557.39996 371.85873 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 550.39996 373.97556 Tm
(5)Tj
0 0 0 rg
(]. )Tj
ET
0.5 0.5 0.5 rg
10 339.20001 m
10 341.20001 l
602 341.20001 l
601 340.20001 l
11 340.20001 l
11 340.20001 l
h
f
0.875 0.875 0.875 rg
602 341.20001 m
602 339.20001 l
10 339.20001 l
11 340.20001 l
601 340.20001 l
601 340.20001 l
h
f
0 0 0 rg
BT
/T1_1 1 Tf
16.15384 0 0 16.15384 10 299.04572 Tm
(Polynomial Arithmetic)Tj
/T1_0 1 Tf
14 0 0 14 10 262.79092 Tm
(The CRC performs its magic using polynomials modulo two arithmetic. Poly\nomial arithmetic mod 2 )Tj
T*
(allows an efficient implementation of a form of division that is fast, e\asy to implement, and sufficient for )Tj
T*
(the purposes of error detection. \(This scheme is not particularly usefu\l for the division of common )Tj
T*
(numbers\). Polynomial arithmetic mod 2 differs slightly from normal comp\uter arithmetic, and is )Tj
T*
(generally the most confusing part of the CRC. )Tj
0 -2.55714 TD
(A polynomial is a value expressed in a particular algebraic form, that o\f: A[n]*X^n + A[n-1]*X^n-1 )Tj
0 -1.30421 TD
(+ . . . + A[1]*X + A[0] \(or A)Tj
11.2 0 0 11.2 172.09201 137.94783 Tm
(n)Tj
14 0 0 14 177.692 141.53183 Tm
(X)Tj
11.2 0 0 11.2 187.8 145.11583 Tm
(n)Tj
14 0 0 14 193.39998 141.53183 Tm
( + A)Tj
11.2 0 0 11.2 218.40401 137.94783 Tm
(n-1)Tj
14 0 0 14 233.33359 141.53183 Tm
(X)Tj
11.2 0 0 11.2 243.44159 145.11583 Tm
(n-1)Tj
14 0 0 14 258.37119 141.53183 Tm
( + . . . + A)Tj
11.2 0 0 11.2 315.77118 137.94783 Tm
(1)Tj
14 0 0 14 321.37119 141.53183 Tm
(X + A)Tj
11.2 0 0 11.2 356.48318 137.94783 Tm
(0)Tj
14 0 0 14 362.08319 141.53183 Tm
(\). )Tj
-25.1488 -2.76492 Td
(Our common number system is an implied polynomial of base 10: Each digit\ means that digit is )Tj
0 -1.2 TD
(multiplied by the associated power of 10. The base 2 or binary system of\ numeration is also a form of )Tj
T*
(the general polynomial concept. When we see a number, we think of it as \a single value; we mentally )Tj
T*
(perform the polynomial evaluation in the assumed base to get a single re\sult. On the other hand, formal )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM \(3 of 12\)11/29/2005 10\:12:14 AM)Tj
ET
EMC 

endstreamendobj137 0 obj 4200endobj138 0 obj<</Length 137 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(The Great CRC Mystery)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 753.97552 Tm
(polynomials are considered to be a list of multiple separate units, and \the existence or evaluation of an )Tj
0 -1.2 TD
(ultimate single value for the polynomial may not be important. )Tj
0 -2.55714 TD
(Because decimal arithmetic uses constant-base polynomials, all of us alr\eady know how to do )Tj
0 -1.2 TD
(polynomial arithmetic in a constant base \(10\); however, the polynomial\s used in CRC calculations are )Tj
T*
(polynomials modulo two. By modulo 2 we mean that a digit can have only v\alues 0 and 1. Of course, )Tj
T*
(this is always the case with binary values, so one might well wonder wha\t all the mumbo-jumbo is )Tj
T*
(about. The difference is this: A modulo polynomial has no carry operatio\n between places [)Tj
ET
0 0 1 RG
0.7056 w 10 M 0 j 0 J []0 d 
522.84802 632.05872 m
529.84802 632.05872 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 522.84802 634.17554 Tm
(6)Tj
0 0 0 rg
(]; each )Tj
-36.632 -1.34286 Td
(place is computed separately. We perform mod 2 operations logically, bit\ by bit; in mod 2, the addition )Tj
T*
(operation is a logical exclusive-OR of the values, and mod 2 subtraction\ is exactly the same \(exclusive-)Tj
T*
(OR\) operation. )Tj
0 -2.55714 TD
(Modulo arithmetic is used for CRC's because of its simplicity: Modulo ar\ithmetic does not require carry )Tj
0 -1.2 TD
(or borrow operations. In computing hardware, the carry circuitry is a ma\jor part of arithmetic )Tj
T*
(computation, and is a major contributor to speed limitations. Of course,\ since we have both subtraction )Tj
T*
(and exclusive-OR instructions available in most computer instruction set\s, this particular advantage is )Tj
T*
(less important for software implementations of CRC. Nevertheless, the si\mplicity of modulo arithmetic )Tj
T*
(allows several different software approaches not available in our conven\tional arithmetic. Note that the )Tj
T*
(modulo-type operations available in programming languages \(e.g., the Pa\scal MOD operator\), operate )Tj
T*
(on entire numbers rather than individual bits or places. )Tj
0 -2.55714 TD
(A polynomial division mod 2 is very similar to common binary division, e\xcept that we perform a )Tj
0 -1.2 TD
(logical exclusive-OR operation instead of a binary subtraction. Similarl\y, because "greater than" and )Tj
T*
("less than" are meaningless in modulo arithmetic, we can replace these o\perators by performing the )Tj
T*
(exclusive-OR operation is the high bit is set or 1, driving the high par\t of the dividend to zeros. )Tj
0 -2.55714 TD
(We can implement a polynomial division as follows: A polynomial division\ register of a length )Tj
0 -1.2 TD
(corresponding to the remainder produced by the polynomial to be used is \set up \(see Figure 1, below\) )Tj
T*
([)Tj
ET
14.662 270.65875 m
21.662 270.65875 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 14.662 272.77554 Tm
(7)Tj
0 0 0 rg
(]. Each element of the register should be able to hold the maximum modul\o value; in "mod 2," a single )Tj
-0.33299 -1.34286 Td
(bit suffices. \(Note that the hardware diagrams are intended only as exa\mples; very short CRC's are of )Tj
T*
(limited practical use, and there are better ways to do the job.\) )Tj
/T1_1 1 Tf
0 -2.56195 TD
(       Polynomial = x^5 + x^4 + x^2 + 1 = 110101)Tj
0 -2.39999 TD
(       x^4         x^3     x^2         x^1     x^0)Tj
0 -1.2 TD
(      +---+       +---+   +---+       +---+   +---+)Tj
T*
(   +<-|Q D|<-XOR<-|Q D|<--|Q D|<-XOR<-|Q D|<--|Q D|<-XOR<- dn)Tj
T*
(   |  |   |   ^   |   |   |   |   ^   |   |   |   |   ^)Tj
T*
(   |  +---+   |   +---+   +---+   |   +---+   +---+   |)Tj
T*
(   |          |                   |                   |)Tj
T*
(   +----------+-------------------+-------------------+)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM \(4 of 12\)11/29/2005 10\:12:14 AM)Tj
ET
EMC 

endstreamendobj139 0 obj 4123endobj140 0 obj<</Length 139 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(The Great CRC Mystery)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_1 1 Tf
14 0 0 14 10 753.90814 Tm
(   FIGURE 1.  Polynomial Divide Hardware for a 4 bit CRC)Tj
/T1_0 1 Tf
0 -2.55232 TD
(The register is cleared, then the data are shifted into the register fro\m the right; each shift is a )Tj
0 -1.2 TD
(polynomial multiplication. Each shift also shifts a bit out of the regis\ter from the most significant bit )Tj
T*
(\(MSb\). We know that the register value will exceed our representation \when the shifted-out bit is logical )Tj
T*
(1, so we arrange to perform our polynomial subtraction" when this happen\s; that is, when we shift out a )Tj
T*
(1, we exclusive-OR the polynomial with the value in the register. Becaus\e our polynomial \(the magic )Tj
T*
(number\) always contains a high-order bit, which always forces the shift\ed-out bit back to a logical 0, we )Tj
T*
(need not actually operate on the high-order bit. So only zeros shift out\, keeping the mod 2 polynomial )Tj
T*
(remainder in the register. )Tj
0 -2.55714 TD
(This bit-level hardware process is easily simulated. Turbo Pascal algori\thms for the simulation are )Tj
0 -1.2 TD
(shown in )Tj
ET
0 0 1 RG
0.7056 w 10 M 0 j 0 J []0 d 
64.44601 545.85876 m
130.946 545.85876 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 64.44601 547.97552 Tm
(Listing One)Tj
0 0 0 rg
(, page 76. Software simulation has the advantage of a fast and easy inve\stigation of )Tj
-3.88901 -1.34286 Td
(an algorithm, allowing quick changes to try out various forms of optimiz\ation. The program produces a )Tj
T*
("trace" of the execution, showing the step-by-step operation. )Tj
0 -2.55714 TD
(The polynomial division register does not hold the desired remainder unt\il the place containing the last )Tj
0 -1.2 TD
(data bit has been shifted out of the register. To do this, a zero data b\it be shifted in for each bit of the )Tj
T*
(register. In the case of CRC-CCITT, 16 bits \(2 bytes\) of zeros need to\ be appended to the data. After )Tj
T*
(entering the zero bits, the result in the polynomial division register i\s the CRC result. The common )Tj
T*
(implementation of XMODEM requires these two trailing bytes. )Tj
0 -2.55714 TD
(The CRC result can be obtained without shifting in the two zero bytes by\ rearranging the CRC register )Tj
0 -1.2 TD
(and feeding the data in at the top end of the system \(see Figure 2, bel\ow\). By shifting the CRC register )Tj
T*
(we can shift zeros in from the right. The data bit will be compared to t\he MSb in the CRC register, and )Tj
T*
(only if they differ will the polynomial be subtracted. As before, this a\cts to keep the full remainder in the )Tj
T*
(register; however, the remainder is now correct after each bit, and requ\ires no trailing zeros. )Tj
/T1_1 1 Tf
0 -2.56197 TD
(       Polynomial = x^5 + x^4 + x^2 + 1 = 110101)Tj
0 -2.39999 TD
(       dn   x^4         x^3     x^2         x^1     x^0)Tj
0 -1.2 TD
(       v   +---+       +---+   +---+       +---+   +---+)Tj
T*
(   +<-XOR<-|Q D|<-XOR<-|Q D|<--|Q D|<-XOR<-|Q D|<--|Q D|<-+)Tj
T*
(   |       |   |   ^   |   |   |   |   ^   |   |   |   |  |)Tj
T*
(   |       +---+   |   +---+   +---+   |   +---+   +---+  |)Tj
T*
(   |               |                   |                  |)Tj
T*
(   +---------------+-------------------+------------------+)Tj
0 -2.39999 TD
(   FIGURE 2.  CRC Hardware)Tj
/T1_0 1 Tf
0 -2.55232 TD
(A simulation of this immediate-result algorithm \(called, for lack of a \better name, the CRC algorithm\) is )Tj
0 -1.2 TD
(also given in )Tj
ET
85.054 47.85875 m
155.054 47.85875 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 85.054 49.97556 Tm
(Listing One,)Tj
0 0 0 rg
( for comparison to polynomial division. Notice that both the polynomial \)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM \(5 of 12\)11/29/2005 10\:12:14 AM)Tj
ET
EMC 

endstreamendobj141 0 obj 4502endobj142 0 obj<</Length 141 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(The Great CRC Mystery)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 753.97552 Tm
(division and CRC algorithms come up with the same remainder \(or CRC val\ue\), but the CRC version )Tj
0 -1.2 TD
(does it faster and with more consistent logic. )Tj
ET
0.5 0.5 0.5 rg
10 704.39996 m
10 706.39996 l
602 706.39996 l
601 705.39996 l
11 705.39996 l
11 705.39996 l
h
f
0.875 0.875 0.875 rg
602 706.39996 m
602 704.39996 l
10 704.39996 l
11 705.39996 l
601 705.39996 l
601 705.39996 l
h
f
0 0 0 rg
BT
/T1_1 1 Tf
16.15384 0 0 16.15384 10 664.24573 Tm
(Faster CRC's in Software)Tj
/T1_0 1 Tf
14 0 0 14 10 627.99091 Tm
(The bit-by-bit form of the CRC algorithm can be, and often is, directly \simulated in software. The )Tj
T*
(shifting and looping required by this approach can be reduced in several\ ways. Both byte-oriented [)Tj
ET
0 0 1 RG
0.7056 w 10 M 0 j 0 J []0 d 
566.77997 609.0741 m
573.77997 609.0741 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 566.77997 611.19092 Tm
(8)Tj
0 0 0 rg
(] )Tj
-39.77 -1.34286 Td
(and table-oriented [)Tj
ET
119.634 590.27411 m
126.634 590.27411 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 119.634 592.39093 Tm
(9)Tj
0 0 0 rg
(] algorithms have been available in the technical literature for a numbe\r of years. )Tj
-7.83099 -1.34286 Td
(Table-oriented algorithms may \(or may not\) produce somewhat higher spe\ed, at the expense of a sizable )Tj
T*
(table of constants that generally must be initialized before use. Exampl\es of the various forms of CRC )Tj
T*
(algorithms are given in )Tj
ET
142.98599 537.87415 m
211.82401 537.87415 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 142.98599 539.99091 Tm
(Listing Two)Tj
0 0 0 rg
( \(page 78\). )Tj
-9.49899 -2.7 Td
(We can speed up the algorithm even more by precomputing the CRC for all \possible combinations of a )Tj
T*
(16-bit CRC and a data byte and then saving the results. Done naively, th\is would be a transformation of )Tj
T*
(24 bits \(16 bits of the previous register, and 8 bits of data\) into 16\ bits. This approach would thus require )Tj
T*
(2^25 Bytes \(about 34 Megabytes\) of look-up table. In order to make the\ table approach practical, we )Tj
T*
(must find a way to reduce the size of the table. )Tj
0 -2.55714 TD
(If we examine the CRC hardware, we notice that the current data bit is a\lways combined with the current )Tj
0 -1.2 TD
(MSb of the CRC register. When we compute a whole byte CRC, we end up com\bining the whole data )Tj
T*
(byte with the high-byte of the CRC. We can precompute the exclusive-OR o\f the data byte and the high )Tj
T*
(byte of the CRC register \(this is a single operation in software\), yie\lding a single byte we can call the )Tj
T*
(combined term or the combination value. )Tj
0 -2.55714 TD
(For the common 16-bit CRC's, it turns out that the CRC register changes \in patterns which are directly )Tj
0 -1.2 TD
(related to the combination value. Thus, it is possible to pre-compute th\e CRC changes for all 256 )Tj
T*
(possible combination values. Then, when we need to do a CRC, we can use \the 1-byte combination )Tj
T*
(value to look up a corresponding 2-byte result, then use that result to \correctly change the CRC register. )Tj
T*
(As one might expect, the required change is simply a 2-byte exclusive-OR\ operation. )Tj
0 -2.55714 TD
(To generate the data for the lookup table, we need only generate the 2-b\yte CRC result for all 256 )Tj
0 -1.2 TD
(possible data bytes, given an "all zeros" starting CRC register. Each re\sult has a 1 for those bits in the )Tj
T*
(CRC register that are changed by a particular combination code. We can u\se a nontable implementation )Tj
T*
(of the CRC to compute the table values. )Tj
0 -2.55714 TD
(This approach to generating a table of CRC values thus requires a 512-by\te lookup table. We must fill )Tj
0 -1.2 TD
(the table with the correct data in an initialization step and perform a \few more run-time operations than )Tj
T*
(the straight lookup process requires \(compute the combination value, lo\ok up the result, then apply the )Tj
T*
(result to the CRC register and compute the new CRC value\). )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM \(6 of 12\)11/29/2005 10\:12:14 AM)Tj
ET
EMC 

endstreamendobj143 0 obj 4546endobj144 0 obj<</Length 143 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(The Great CRC Mystery)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 750.79089 Tm
(Another variations that is faster than the original bit-by-bit approach \and that also eliminates the look-up )Tj
0 -1.2 TD
(storage of the table approach is the bytewide shifting algorithm. A byte\wide approach eliminates seven )Tj
T*
(bit-by-bit test-and-jump operations which are a significant overhead in \the bit-by-bit version, and also )Tj
T*
(takes advantage of fast shift and parallel-logic operations available on\ most processors \(as well as some )Tj
T*
(high-level languages such as Turbo Pascal or C\). )Tj
0 -2.55714 TD
(First we need some algebra: By giving each CRC register bit and each dat\a bit a separate symbol, we )Tj
0 -1.2 TD
(can express the result of a CRC operation symbolically. Each bit of the \CRC register will be represented )Tj
T*
(by a formula showing all the data and original CRC bits which affect tha\t bit in the result. If we take the )Tj
T*
(exclusive-OR of the bits specified by the formula, we can directly compu\te any bit of the CRC result. )Tj
0 -2.55714 TD
(In order to generate the formulas for each bit of the CRC register, we c\reate an algebraic analog of the )Tj
0 -1.2 TD
(shifting and combining process of the bit-by-bit CRC algorithm. Instead \of shifting bit values \(as in a )Tj
T*
(normal shift register\), we instead move the whole symbolic formula for \each bit to the next higher bit )Tj
T*
(position. Instead of actually performing an exclusive-OR operation, we c\oncatenate the formula for the )Tj
T*
(data bit to each of the affected bits in the CRC register, with a symbol\ indicating an exclusive-OR )Tj
T*
(operation. If ever we find that we have two identical variables in any o\ne formula, we can cancel and )Tj
T*
(eliminate them both \(because anything exclusive-ORed with itself is zer\o, and zero exclusive-ORed with )Tj
T*
(any value is just that value\). )Tj
0 -2.55714 TD
(After symbolically processing a whole byte of data, and eliminating comm\on terms, we come up with a )Tj
0 -1.2 TD
(symbolic representation for each bit of the result. By factoring this ex\pression into convenient computer )Tj
T*
(operations, a program is obtained which utilizes the bit parallelism ava\ilable in software. )Tj
ET
0.5 0.5 0.5 rg
10 341.81537 m
10 343.81537 l
602 343.81537 l
601 342.81537 l
11 342.81537 l
11 342.81537 l
h
f
0.875 0.875 0.875 rg
602 343.81537 m
602 341.81537 l
10 341.81537 l
11 342.81537 l
601 342.81537 l
601 342.81537 l
h
f
0 0 0 rg
BT
/T1_1 1 Tf
16.15384 0 0 16.15384 10 301.6611 Tm
(CRC Deviations)Tj
/T1_0 1 Tf
14 0 0 14 10 265.40631 Tm
(More improvement is possible. We have previously assumed that the CRC re\gister is cleared before )Tj
T*
(starting the computation, and also that we specifically compare the stor\ed \(or transmitted\) CRC value to )Tj
T*
(the current CRC result. These assumptions are discarded in protocols oth\er than XMODEM [)Tj
ET
0 0 1 RG
0.7056 w 10 M 0 j 0 J []0 d 
532.59204 229.68953 m
546.59204 229.68953 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 532.59204 231.80632 Tm
(10)Tj
0 0 0 rg
(]. )Tj
-37.328 -2.7 Td
(When a CRC register is contains only zeros, processing a zero data bit d\oes not change the CRC )Tj
T*
(remainder. So, if the CRC register is clear, and extraneous zero bits do\ occur, these data errors will not )Tj
T*
(be detected. For this reason, most current CRC protocols initialize the \CRC register to all 1's before they )Tj
T*
(start the computation, allowing the detection of extraneous leading zero\s. )Tj
0 -2.55714 TD
(We can also eliminate the need to detect the separate CRC field at the e\nd of a data block. If the CRC )Tj
0 -1.2 TD
(result is simply attached to the end of the data, the receiving CRC regi\ster will clear itself automatically )Tj
T*
(if there is no error; that is, each bit of the stored or transmitted CRC\ value should cancel the similar bit )Tj
T*
(in the CRC register. Although of minor importance for software implement\ations, this is a reasonable )Tj
T*
(simplification for hardware CRC devices because it allows the exact same\ hardware to be used )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM \(7 of 12\)11/29/2005 10\:12:14 AM)Tj
ET
EMC 

endstreamendobj145 0 obj 4538endobj146 0 obj<</Length 145 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(The Great CRC Mystery)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 753.80627 Tm
(regardless of block length. )Tj
0 -2.55714 TD
(When the CRC is appended to the end of the data \(thus eliminating the n\eed to detect it as a separate )Tj
0 -1.2 TD
(field\), and if bit-level CRC hardware is also to be supported, CRC soft\ware may need to use data in )Tj
T*
(reverse bit order. This is because bit-level CRC hardware works on data \after it has been serialized, and )Tj
T*
(data is traditionally serialized LSb-first. That is, the parallel-to-ser\ial conversion in an asynchronous )Tj
T*
(serial device sends the rightmost bit of a character first and the leftm\ost bit last. The bit-level CRC )Tj
T*
(hardware has little choice but to treat the resulting data stream as a s\ingle larger number; but that data-)Tj
T*
(stream has its byte-level bit-order changed from our usual expectations.\ )Tj
0 -2.55714 TD
(If a MSb-leftmost CRC routine is to be compatible with bit-level CRC har\dware, it may be necessary to )Tj
0 -1.2 TD
(reverse the bit order of every data byte \(before each is processed or s\erialized\) and also the CRC )Tj
T*
(remainder bytes \(after the block ends\). Bit-order reversal can be done\ in software, hardware, or both. )Tj
T*
(Alternately, the CRC algorithm could be constructed so as to use and hol\d MSb-rightmost data. )Tj
0 -2.55714 TD
(In strictly software CRC implementations, however, we work on data befor\e it is serialized and after it is )Tj
0 -1.2 TD
(recovered and we trust any serialization that occurs to be transparent. \We can thus afford to treat data as )Tj
T*
(a single large value, MSb-leftmost, with MSb-leftmost bytes and a simila\r MSb-leftmost CRC remainder )Tj
T*
(appended on the right. This arrangement is most consistent with both the\ theory and our numerical )Tj
T*
(conventions, and is the form used by XMODEM. The CRC routines shown in t\his article use MSb-)Tj
T*
(leftmost data and keep the result also in MSb-leftmost format. )Tj
0 -2.55714 TD
(If we arrange to verify the CRC by processing the CRC result as data, we\ again fall prey to extraneous )Tj
0 -1.2 TD
(zero data bits. In order detect such errors, we arrange for the CRC regi\ster to take on a unique nonzero )Tj
T*
(value in the event of no error. By some quirk of the algebra, it turns o\ut that if we transmit the )Tj
T*
(complement of the CRC result and then CRC-process that as data upon rece\ption, the CRC register will )Tj
T*
(contain a unique nonzero value depending only upon the CRC polynomial \(\and the occurrence of no )Tj
T*
(errors\). This is the scheme now used by most CRC protocols, and the mag\ic remainder for CRC-CCITT )Tj
T*
(is $1D0F \(hex\). )Tj
ET
0.5 0.5 0.5 rg
10 241.83075 m
10 243.83075 l
602 243.83075 l
601 242.83075 l
11 242.83075 l
11 242.83075 l
h
f
0.875 0.875 0.875 rg
602 243.83075 m
602 241.83075 l
10 241.83075 l
11 242.83075 l
601 242.83075 l
601 242.83075 l
h
f
0 0 0 rg
BT
/T1_1 1 Tf
16.15384 0 0 16.15384 10 201.6765 Tm
(Actual CRC Implementations)Tj
/T1_0 1 Tf
14 0 0 14 10 165.42171 Tm
(I constructed several CRC implementations for speed and size comparisons\ \(see )Tj
ET
0 0 1 RG
0.7056 w 10 M 0 j 0 J []0 d 
462.20001 163.30492 m
531.03796 163.30492 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 462.20001 165.42171 Tm
(Listing Two)Tj
0 0 0 rg
(\). The CRC-)Tj
-32.3 -1.34286 Td
(CCITT polynomial was used, since this is the polynomial used in XMODEM, \as well as many other data )Tj
T*
(communication uses. I used Turbo Pascal although the code could obviousl\y be rewritten in C. A couple )Tj
T*
(of the operations used are Turbo Pascal extensions: )Tj
/T1_2 1 Tf
(Swap\(\))Tj
/T1_0 1 Tf
( is an INTEGER function that exchanges the )Tj
T*
(high and low byte of an integer value; )Tj
/T1_2 1 Tf
(Lo\(\))Tj
/T1_0 1 Tf
( is an INTEGER function which selects only the low byte of )Tj
T*
(an integer. )Tj
0 -2.55714 TD
(I used the )Tj
ET
67.93201 41.50491 m
164.76999 41.50491 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 67.93201 43.6217 Tm
(Pascal Bit-by-Bit)Tj
0 0 0 rg
( approach \(a direct simulation of the hardware method\) to provide a )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM \(8 of 12\)11/29/2005 10\:12:14 AM)Tj
ET
EMC 

endstreamendobj147 0 obj 5324endobj148 0 obj<</Length 147 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(The Great CRC Mystery)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 753.97552 Tm
(reference against which the other algorithms are compared. The )Tj
ET
0 0 1 RG
0.7056 w 10 M 0 j 0 J []0 d 
370.78 751.8587 m
474.22601 751.8587 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 370.78 753.97552 Tm
(Pascal Fast B-B-B)Tj
0 0 0 rg
( is an improved bit )Tj
-25.77 -1.34286 Td
(form comparable to most high-level-language implementations of the XMODE\M CRC, except that this )Tj
0 -1.2 TD
(version requires no trailing zeros to finish the calculation \(and so is\ already faster than the usual )Tj
T*
(version\). The )Tj
ET
88.14799 699.45874 m
153.86401 699.45874 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 88.14799 701.57556 Tm
(Pascal Byte)Tj
0 0 0 rg
( version illustrates the improvement wrought from algebraic factoring; t\he )Tj
ET
10 680.65875 m
81.14799 680.65875 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 10 682.77551 Tm
(Pascal Table)Tj
0 0 0 rg
( version shows how a pre-computed table can simplify and speed execution\-time operation. )Tj
0 -1.34286 TD
(The Machine Code versions of )Tj
ET
186.134 661.8587 m
212.58 661.8587 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 186.134 663.97552 Tm
(Byte)Tj
0 0 0 rg
( and )Tj
ET
239.79601 661.8587 m
271.67401 661.8587 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 239.79601 663.97552 Tm
(Table)Tj
0 0 0 rg
( show yet more improved speed. The different approaches )Tj
-16.414 -1.34286 Td
(illustrate various tradeoffs of speed, space, and specialization. The re\sults \()Tj
ET
430.29401 643.05872 m
472.67203 643.05872 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 430.29401 645.17554 Tm
(Table 1)Tj
0 0 0 rg
(, left\) show a range of )Tj
-30.021 -1.34286 Td
(almost two orders of magnitude in execution speed. )Tj
0 -2.55714 TD
(Each CRC implementation was made a Pascal PROCEDURE for easy testing and\ comparison. For )Tj
0 -1.2 TD
(validation, varying amounts of program code from main-memory were proces\sed by each )Tj
T*
(implementation. All algorithms achieved the same result. Several of thes\e versions have been placed in )Tj
T*
(an implementation of XMODEM with good results. )Tj
ET
0.5 0.5 0.5 rg
10 507.39996 m
10 509.39996 l
602 509.39996 l
601 508.39996 l
11 508.39996 l
11 508.39996 l
h
f
0.875 0.875 0.875 rg
602 509.39996 m
602 507.39996 l
10 507.39996 l
11 508.39996 l
601 508.39996 l
601 508.39996 l
h
f
0 0 0 rg
BT
/T1_1 1 Tf
16.15384 0 0 16.15384 10 467.24573 Tm
(Time Tests)Tj
/T1_0 1 Tf
14 0 0 14 10 430.99094 Tm
(For the time tests, each implementation was executed 10,000 times under \Turbo Pascal 3.01A on an )Tj
T*
(8088 in a Leading Edge PC with a 7.16 Megahertz \(MHz\) clock; the times\ would be 50% longer on an )Tj
T*
(IBM PC. The time was taken automatically from MS DOS. Because the MS DOS\ timer ticks only about )Tj
T*
(18.2 times per second, this method is only precise within about 55 milli\seconds \(msec\) on both the start )Tj
T*
(and end of the timing interval. The large number of repetitions minimize\ the effect. )Tj
/T1_2 1 Tf
0 -2.56197 TD
(                      10,000 Uses \(secs\)     1 Use \(msec\))Tj
0 -1.2 TD
(                      Procedure  In Line   Procedure  In Line)Tj
ET
10 256.47412 m
106.83801 256.47412 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 10 258.59094 Tm
(Pascal Bit-by-Bit)Tj
0 0 0 rg
( 13.790 13.070 1.379 1.307 )Tj
ET
264.33801 256.47412 m
367.78403 256.47412 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 264.33801 258.59094 Tm
(Pascal Fast B-B-B)Tj
0 0 0 rg
( 7.310 6.590 0.731 0.659 )Tj
ET
511.28403 256.47412 m
577 256.47412 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 511.28403 258.59094 Tm
(Pascal Byte)Tj
0 0 0 rg
( )Tj
-35.806 -1.34286 Td
(2.150 1.430 0.215 0.143 )Tj
ET
150 237.67412 m
221.14798 237.67412 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 150 239.79094 Tm
(Pascal Table)Tj
0 0 0 rg
( 1.430 0.710 0.143 0.071 )Tj
ET
364.64798 237.67412 m
476.63403 237.67412 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 364.64798 239.79094 Tm
(Machine Code Byte)Tj
0 0 0 rg
( 1.050 0.330 0.105 )Tj
-25.332 -1.34286 Td
(0.033 )Tj
ET
45 218.87415 m
162.41801 218.87415 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 45 220.99094 Tm
(Machine Code Table)Tj
0 0 0 rg
( 0.890 0.170 0.089 0.017 TABLE 1. )Tj
-2.5 -2.7 Td
(The time reported as "10000 Uses" is real time decreased by the amount o\f time taken by 10,000 empty )Tj
T*
(loops, thus giving us the time associated with the procedure call and ex\ecution, instead of also including )Tj
T*
(the looping structure that we use only for the tests. The "In-Line" colu\mn decreases "10000 uses" by the )Tj
T*
(time taken for 10,000 procedure calls and returns, giving the time for e\xecution only. )Tj
ET
0.5 0.5 0.5 rg
10 100.01538 m
10 102.01538 l
602 102.01538 l
601 101.01538 l
11 101.01538 l
11 101.01538 l
h
f
0.875 0.875 0.875 rg
602 102.01538 m
602 100.01538 l
10 100.01538 l
11 101.01538 l
601 101.01538 l
601 101.01538 l
h
f
0 0 0 rg
BT
/T1_1 1 Tf
16.15384 0 0 16.15384 10 59.86113 Tm
(Selection Criteria)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM \(9 of 12\)11/29/2005 10\:12:14 AM)Tj
ET
EMC 

endstreamendobj149 0 obj 5146endobj150 0 obj<</Length 149 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(The Great CRC Mystery)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 753.60632 Tm
(The time necessary to process a byte \(including the CRC operation, and \whatever queuing operations )Tj
0 -1.2 TD
(and other tests need to be performed\) should be less than the time it t\akes to receive a character. We )Tj
T*
(could just accumulate the data in a block as it is received, then CRC-pr\ocess the whole block, but this )Tj
T*
(would add some delay, or latency, between receiving the last data byte a\nd returning a response to the )Tj
T*
(sender \(ACK for good data, NAK for an error, in XMODEM\). Some XMODEM i\mplementations )Tj
T*
(appear to use this method, giving the impression that the protocol or th\e CRC are responsible for the )Tj
T*
(delay. Because fast CRC routines are obviously possible, it is hard to r\ationalize any latency at all [)Tj
ET
0 0 1 RG
0.7056 w 10 M 0 j 0 J []0 d 
566.42999 650.68951 m
580.42999 650.68951 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 566.42999 652.80627 Tm
(11)Tj
0 0 0 rg
(]. )Tj
-39.74501 -2.7 Td
(The )Tj
ET
35.27 612.88953 m
100.98599 612.88953 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 35.27 615.00629 Tm
(Pascal Byte)Tj
0 0 0 rg
( version, which takes only a few lines of code and is machine-independen\t \(under Turbo )Tj
-1.80499 -1.34286 Td
(Pascal\), may be suitable for speeds up to 9600 bps, and is a reasonable\ choice for most use. The )Tj
ET
550.45599 594.08948 m
589.72601 594.08948 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 550.45599 596.2063 Tm
(Pascal )Tj
ET
10 575.28949 m
41.87801 575.28949 l
S
BT
/T1_0 1 Tf
14 0 0 14 10 577.40631 Tm
(Table)Tj
0 0 0 rg
( version is a little faster, but the table generally must be initialized\ before use, either by using a )Tj
0 -1.34286 TD
(different CRC version, or perhaps by reading the values in from a file. \Alternately \(in most languages\) )Tj
0 -1.2 TD
(the table could be defined in the source code as a large body of constan\ts. )Tj
0 -2.55714 TD
(The faster versions can generally benefit from being used in-line \(that\ is, not as procedures\) to avoid )Tj
0 -1.2 TD
(procedure call/return overhead, but this is also inconvenient, since eac\h use would involve duplicating )Tj
T*
(the same code in different places. The )Tj
ET
226.15999 470.28952 m
343.578 470.28952 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 226.15999 472.40631 Tm
(Machine Code Table)Tj
0 0 0 rg
( version is shorter, and so would minimize )Tj
-15.44 -1.34286 Td
(the duplication penalty. The )Tj
ET
170.59398 451.4895 m
241.742 451.4895 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 170.59398 453.60632 Tm
(Pascal Table)Tj
0 0 0 rg
( version can also be used in-line, because it takes a minimum )Tj
-11.47099 -1.34286 Td
(amount of code. I use an Include file holding the )Tj
ET
285.67401 432.68951 m
397.66 432.68951 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 285.67401 434.8063 Tm
(Machine Code Byte)Tj
0 0 0 rg
( version, then call the routine as a )Tj
-19.69099 -1.34286 Td
(procedure; the resulting code is both small and fast. )Tj
ET
0.5 0.5 0.5 rg
10 383.23077 m
10 385.23077 l
602 385.23077 l
601 384.23077 l
11 384.23077 l
11 384.23077 l
h
f
0.875 0.875 0.875 rg
602 385.23077 m
602 383.23077 l
10 383.23077 l
11 384.23077 l
601 384.23077 l
601 384.23077 l
h
f
0 0 0 rg
BT
/T1_1 1 Tf
16.15384 0 0 16.15384 10 343.07651 Tm
(Other Uses)Tj
/T1_0 1 Tf
14 0 0 14 10 306.82172 Tm
(Although this article has concentrated on CRC's in communications and da\ta storage, CRC's can be used )Tj
T*
(in many different applications involving error detection. Such applicati\ons include start-up verification )Tj
T*
(of ROM code, load-time verification of RAM modules \(as in the 6809 oper\ating system OS9\), and )Tj
T*
(program and data correctness validation. )Tj
0 -2.55714 TD
(It should be noted that CRC polynomials are designed and constructed for\ use over data blocks of )Tj
0 -1.2 TD
(limited size; larger amounts of data will invalidate some of the expecte\d properties \(such as the )Tj
T*
(guarantee of detecting any 2-bit errors\). For 16-bit polynomials, the m\aximum designed data length is )Tj
T*
(generally 2^15 - 1 bits, which is just one bit less than 4K bytes. Conse\quently, a 16-bit polynomial is )Tj
T*
(probably not the best choice to produce a single result representing an \entire file, or even to verify a )Tj
T*
(single EROM device \(which are now commonly 8K or more\). For this reaso\n, the OS9 polynomial is 24 )Tj
T*
(bits long. )Tj
ET
0.5 0.5 0.5 rg
10 87.04616 m
10 89.04616 l
602 89.04616 l
601 88.04616 l
11 88.04616 l
11 88.04616 l
h
f
0.875 0.875 0.875 rg
602 89.04616 m
602 87.04616 l
10 87.04616 l
11 88.04616 l
601 88.04616 l
601 88.04616 l
h
f
0 0 0 rg
BT
/T1_1 1 Tf
16.15384 0 0 16.15384 10 46.89189 Tm
(How To Learn More)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM \(10 of 12\)11/29/2005 1\0:12:14 AM)Tj
ET
EMC 

endstreamendobj151 0 obj 5359endobj152 0 obj<</Length 151 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(The Great CRC Mystery)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 740.63708 Tm
(A good introduction to CRC's can be found in the classic )Tj
/T1_1 1 Tf
(Error Correcting Codes,)Tj
/T1_0 1 Tf
( by Peterson and )Tj
0 -1.2 TD
(Weldon \(Cambridge, Mass., MIT Press, 1972\), but you can expect to do s\ome serious math to )Tj
T*
(understand it. A brief non-mathematical chapter on CRC error detection i\n data applications \(with some )Tj
T*
(good figures\) is available in )Tj
/T1_1 1 Tf
(Technical Aspects of Data Communication,)Tj
/T1_0 1 Tf
( 2nd ed., by J. McNamara )Tj
T*
(\(Digital Equipment Corporation, Digital Press, 1982\). The very brief s\ection in )Tj
/T1_1 1 Tf
(Computer Networks)Tj
/T1_0 1 Tf
( by )Tj
T*
(A. Tanenbaum is also fairly good. )Tj
ET
0.5 0.5 0.5 rg
10 623.86151 m
10 625.86151 l
602 625.86151 l
601 624.86151 l
11 624.86151 l
11 624.86151 l
h
f
0.875 0.875 0.875 rg
602 625.86151 m
602 623.86151 l
10 623.86151 l
11 624.86151 l
601 624.86151 l
601 624.86151 l
h
f
0 0 0 rg
BT
/T1_2 1 Tf
16.15384 0 0 16.15384 10 583.70728 Tm
(Notes)Tj
/T1_0 1 Tf
14 0 0 14 32.5 547.45245 Tm
(1.  The CRC does not require a fixed block size \(though there is a buil\t-in maximum\), but some )Tj
1.25 -1.2 Td
(error-correcting protocols do. Larger amounts of data are simply partiti\oned into blocks that are )Tj
T*
(considered separately. )Tj
-1.25 -1.2 Td
(2.  Peterson, W. W. and D. T. Brown. 1961. Cyclic Codes for Error Detect\ion." )Tj
/T1_1 1 Tf
(Proceedings of the )Tj
1.25 -1.2 Td
(IRE.)Tj
/T1_0 1 Tf
( January. 228-235. )Tj
-1.25 -1.2 Td
(3.  Tanenbaum, A. 1981. )Tj
/T1_1 1 Tf
(Computer Networks.)Tj
/T1_0 1 Tf
( Prentice-Hall. 128-132. )Tj
T*
(4.  Brooks, L. and J. Rasp. 1984. "How Accurate is Accurate?" )Tj
/T1_1 1 Tf
(DDJ.)Tj
/T1_0 1 Tf
( February. 27. )Tj
T*
(5.  Error detection is only part of the requirements for a protocol. Oth\er requirements include )Tj
1.25 -1.2 Td
(transmitting the data in blocks, numbering the blocks, and responding wh\en a block has been )Tj
T*
(received. The corresponding design decisions in XMODEM typically add yet\ another four bytes )Tj
T*
(to each block transferred, for a required overhead of about 4.5 percent.\ This value can be, and )Tj
T*
(often is, additionally degraded in implementation. )Tj
-1.25 -1.2 Td
(6.  The general case of polynomial arithmetic, which allows a nonconstan\t base, generally makes )Tj
1.25 -1.2 Td
(carry operations \(between terms\) difficult. )Tj
-1.25 -1.2 Td
(7.  It is common and traditional for the CRC register to be shown shifti\ng right, which is the exact )Tj
1.25 -1.2 Td
(inverse of this author's analogy to binary division. Given our system of\ numeration, it seems )Tj
T*
(reasonable to place the most significant digits of a value to the left, \and it is then correct for the )Tj
T*
(CRC register to be seen as shifting to the left. )Tj
/T1_3 1 Tf
7 0 0 7 75.13901 245.05246 Tm
(m)Tj
/T1_0 1 Tf
(     )Tj
14 0 0 14 90 245.05246 Tm
(Helness, K. 1974. "Implementation of a Parallel Cyclic Redundancy Check \Generator." )Tj
/T1_1 1 Tf
T*
(Computer Design.)Tj
/T1_0 1 Tf
( March. 91-96. )Tj
/T1_3 1 Tf
7 0 0 7 75.13901 211.45247 Tm
(m)Tj
/T1_0 1 Tf
(     )Tj
14 0 0 14 90 211.45247 Tm
(Vasa, S. 1976. "Calculating an Error-Checking Character in Software." )Tj
/T1_1 1 Tf
(Computer Design.)Tj
/T1_0 1 Tf
( )Tj
T*
(May. 190-192. )Tj
/T1_3 1 Tf
7 0 0 7 75.13901 177.85248 Tm
(m)Tj
/T1_0 1 Tf
(     )Tj
14 0 0 14 90 177.85248 Tm
(Socha, H., )Tj
/T1_1 1 Tf
(et. al.)Tj
/T1_0 1 Tf
( 1979. "Letter to the editor." )Tj
/T1_1 1 Tf
(Computer Design.)Tj
/T1_0 1 Tf
( May. 6, 12. )Tj
/T1_3 1 Tf
7 0 0 7 75.13901 161.05246 Tm
(m)Tj
/T1_0 1 Tf
(     )Tj
14 0 0 14 90 161.05246 Tm
(Kjelberg, I. 1985. "Letter to the editor." )Tj
/T1_1 1 Tf
(IEEE Micro.)Tj
/T1_0 1 Tf
( August. 4, 99. )Tj
/T1_3 1 Tf
7 0 0 7 75.13901 144.25247 Tm
(m)Tj
/T1_0 1 Tf
(     )Tj
14 0 0 14 90 144.25247 Tm
(Whiting, J. 1975. "An Efficient Software Method for Implementing Polynom\ial Error )Tj
T*
(Detection Codes." )Tj
/T1_1 1 Tf
(Computer Design.)Tj
/T1_0 1 Tf
( March. 73-77. )Tj
/T1_3 1 Tf
7 0 0 7 75.13901 110.65248 Tm
(m)Tj
/T1_0 1 Tf
(     )Tj
14 0 0 14 90 110.65248 Tm
(Perez, A. 1983. "Byte-wise CRC Calculations." )Tj
/T1_1 1 Tf
(IEEE Micro.)Tj
/T1_0 1 Tf
( June. 40-50. )Tj
/T1_3 1 Tf
7 0 0 7 75.13901 93.85248 Tm
(m)Tj
/T1_0 1 Tf
(     )Tj
14 0 0 14 90 93.85248 Tm
(Schwaderer, D. 1985. "CRC Calculation." )Tj
/T1_1 1 Tf
(PC Tech Journal.)Tj
/T1_0 1 Tf
( 118-132. )Tj
/T1_3 1 Tf
7 0 0 7 75.13901 77.05247 Tm
(m)Tj
/T1_0 1 Tf
(     )Tj
14 0 0 14 90 77.05247 Tm
(McKee, H. 1975. "Improved CRC Technique Detects Erroneous Leading and Tr\ailing 0's )Tj
T*
(in Data Blocks." )Tj
/T1_1 1 Tf
(Computer Design.)Tj
/T1_0 1 Tf
( October. 102-106. )Tj
/T1_3 1 Tf
7 0 0 7 75.13901 43.45248 Tm
(m)Tj
/T1_0 1 Tf
(     )Tj
14 0 0 14 90 43.45248 Tm
(Fortune, P. 1977. "Two-Step Procedure Improves CRC Mechanisms." )Tj
/T1_1 1 Tf
(Computer Design.)Tj
/T1_0 1 Tf
( )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM \(11 of 12\)11/29/2005 1\0:12:14 AM)Tj
ET
EMC 

endstreamendobj153 0 obj(The Great CRC Mystery)endobj154 0 obj<</C 158 0 R/V 1.25>>endobj155 0 obj<</S 156 0 R/URL(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM)>>endobj156 0 obj<</G 157 0 R>>endobj157 0 obj<</PS[792.0 612.0]/M[10.080002 10.080002 26.0 36.0]/S 0/AS 1/PO 0/AT 70/AH 0/AL 0/CB 0/SU 1>>endobj158 0 obj[155 0 R]endobj159 0 obj(http://www.ciphersbyritter.com/ARTS/CRCMYST.HTM)endobj160 0 obj(ÜÀ[—ıÕœÉË˙¿qv@)endobj161 0 obj<</ID 160 0 R/O[11 0 R 18 0 R 20 0 R 27 0 R 32 0 R 37 0 R 43 0 R 47 0 R 52 0 R 71 0 R 81 0 R 100 0 R]/S/SPS/T 153 0 R/CT(text/html)/SI 162 0 R/TID 163 0 R/TS(D:20051130021214)>>endobj162 0 obj<</AU 159 0 R/TS(D:20051130021214)>>endobj163 0 obj(‚Õ˙8[5•FTöjB◊6Ä)endobj164 0 obj<</Names[160 0 R 161 0 R]>>endobj165 0 obj<</Names[159 0 R 161 0 R]>>endobj166 0 obj<</Count 1/Parent 6 0 R/First 167 0 R/Last 167 0 R/Title(ciphersbyritter.com)>>endobj167 0 obj<</Parent 166 0 R/Dest[11 0 R/XYZ 0 792 null]/Title(The Great CRC Mystery)/SE 10 0 R>>endobj168 0 obj<</Length 3243/Type/Metadata/Subtype/XML>>stream
<?xpacket begin='Ôªø' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:84b8d245-c6cb-4818-959b-aefe1298583b' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Web Capture 6.0'></rdf:Description>
<rdf:Description rdf:about='uuid:84b8d245-c6cb-4818-959b-aefe1298583b' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:ModifyDate='2005-11-29T18:12:14-08:00' xap:CreateDate='2005-11-29T18:12:13Z' xap:MetadataDate='2005-11-29T18:12:14-08:00'></rdf:Description>
<rdf:Description rdf:about='uuid:84b8d245-c6cb-4818-959b-aefe1298583b' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:64c87047-aace-4f0c-8983-631d8c6f46b7'/>
<rdf:Description rdf:about='uuid:84b8d245-c6cb-4818-959b-aefe1298583b' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>The Great CRC Mystery</rdf:li></rdf:Alt></dc:title></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end='w'?>
endstreamendobjxref
0 169
0000000004 65535 f
0000000016 00000 n
0000000145 00000 n
0000000204 00000 n
0000000063 00001 f
0000000351 00000 n
0000000371 00000 n
0000000439 00000 n
0000000540 00000 n
0000000584 00000 n
0000000631 00000 n
0000001025 00000 n
0000001235 00000 n
0000001372 00000 n
0000001396 00000 n
0000001576 00000 n
0000001614 00000 n
0000001798 00000 n
0000002031 00000 n
0000002215 00000 n
0000002239 00000 n
0000002437 00000 n
0000002461 00000 n
0000002695 00000 n
0000002740 00000 n
0000002974 00000 n
0000003208 00000 n
0000003442 00000 n
0000003641 00000 n
0000003665 00000 n
0000003899 00000 n
0000003930 00000 n
0000004162 00000 n
0000004361 00000 n
0000004385 00000 n
0000004574 00000 n
0000004605 00000 n
0000004792 00000 n
0000004990 00000 n
0000005014 00000 n
0000005248 00000 n
0000005286 00000 n
0000005520 00000 n
0000005710 00000 n
0000005908 00000 n
0000005932 00000 n
0000006166 00000 n
0000006190 00000 n
0000006400 00000 n
0000006424 00000 n
0000006614 00000 n
0000006645 00000 n
0000006842 00000 n
0000007053 00000 n
0000007077 00000 n
0000007281 00000 n
0000007382 00000 n
0000007582 00000 n
0000007777 00000 n
0000007974 00000 n
0000008172 00000 n
0000008408 00000 n
0000008466 00000 n
0000000087 00001 f
0000008846 00000 n
0000008892 00000 n
0000009086 00000 n
0000009290 00000 n
0000009486 00000 n
0000009681 00000 n
0000009875 00000 n
0000010067 00000 n
0000010265 00000 n
0000010289 00000 n
0000010525 00000 n
0000010591 00000 n
0000010791 00000 n
0000010991 00000 n
0000011186 00000 n
0000011384 00000 n
0000011586 00000 n
0000011783 00000 n
0000011993 00000 n
0000012101 00000 n
0000012194 00000 n
0000012284 00000 n
0000012375 00000 n
0000000088 00001 f
0000000101 00001 f
0000012468 00000 n
0000012492 00000 n
0000012538 00000 n
0000012584 00000 n
0000012630 00000 n
0000012676 00000 n
0000012722 00000 n
0000012768 00000 n
0000012813 00000 n
0000012859 00000 n
0000012905 00000 n
0000012950 00000 n
0000000102 00001 f
0000000109 00001 f
0000013151 00000 n
0000013176 00000 n
0000013224 00000 n
0000013396 00000 n
0000013438 00000 n
0000013627 00000 n
0000000110 00001 f
0000000112 00001 f
0000013813 00000 n
0000000113 00001 f
0000000114 00001 f
0000000115 00001 f
0000000116 00001 f
0000000117 00001 f
0000000118 00001 f
0000000119 00001 f
0000000120 00001 f
0000000121 00001 f
0000000122 00001 f
0000000123 00001 f
0000000124 00001 f
0000000125 00001 f
0000000127 00001 f
0000013900 00000 n
0000000128 00001 f
0000000000 00001 f
0000013967 00000 n
0000013989 00000 n
0000017816 00000 n
0000017838 00000 n
0000021991 00000 n
0000022013 00000 n
0000023538 00000 n
0000023560 00000 n
0000028941 00000 n
0000028963 00000 n
0000033218 00000 n
0000033240 00000 n
0000037418 00000 n
0000037440 00000 n
0000041997 00000 n
0000042019 00000 n
0000046620 00000 n
0000046642 00000 n
0000051235 00000 n
0000051257 00000 n
0000056636 00000 n
0000056658 00000 n
0000061859 00000 n
0000061881 00000 n
0000067295 00000 n
0000067335 00000 n
0000067373 00000 n
0000067457 00000 n
0000067488 00000 n
0000067598 00000 n
0000067624 00000 n
0000067690 00000 n
0000067725 00000 n
0000067919 00000 n
0000067972 00000 n
0000068007 00000 n
0000068051 00000 n
0000068095 00000 n
0000068191 00000 n
0000068294 00000 n
trailer
<</Size 169/Root 1 0 R/Info 3 0 R/ID[<bba1ddc0a5a63c49a48d11a8843ef4e6><902dad1f1994ca49a726517fbd832966>]>>
startxref
71615
%%EOF
